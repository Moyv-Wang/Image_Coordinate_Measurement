# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cr.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class CustomGraphicsView(QtWidgets.QGraphicsView):
    def __init__(self, parent=None):
        super().__init__(parent)

        # 创建场景和画笔
        self._scene = QtWidgets.QGraphicsScene(self)
        self.setScene(self._scene)
        self._pen = QtGui.QPen(QtCore.Qt.red, 2)
        self._brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 100))

        # 创建图片
        # 记录矩形开始点和当前矩形
        self._pixmap_item = None
        self._start_pos = None
        self.o_start_pos = None
        self._rect_item = None
        self.rect = None
        self.o_rect = None

        self.setRenderHint(QtGui.QPainter.Antialiasing)  # 设置反锯齿渲染
        self.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)  # 设置变换锚点为鼠标位置

    def set_image(self, image_path):
        # 加载图片并显示
        pixmap = QtGui.QPixmap(image_path)
        self._pixmap_item = QtWidgets.QGraphicsPixmapItem(pixmap)
        self._scene.addItem(self._pixmap_item)
        # self.fitInView(self._pixmap_item, QtCore.Qt.KeepAspectRatio)

    def wheelEvent(self, event):
        factor = 1.2 ** (event.angleDelta().y() / 240)  # 计算缩放因子
        self.scale(factor, factor)  # 缩放视图

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            # 记录开始点
            self.o_start_pos = event.pos()
            self._start_pos = self.mapToScene(event.pos())
            event.accept()
        elif event.buttons() == QtCore.Qt.RightButton:
            self._scene.removeItem(self._rect_item)
            rect = self._rect_item.mapRectToScene(self.o_rect)
            pixmap = self.scene().views()[0].grab(rect.toRect())
            # # 将 pixmap 显示出来
            # pixmap_item = QtWidgets.QGraphicsPixmapItem(pixmap)
            # self.scene().addItem(pixmap_item)
            pixmap.save('test_res.jpg')

            # 重置矩形开始点和当前矩形
            self._start_pos = None
            self._rect_item = None
            event.accept()
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            # 绘制矩形
            if not self._rect_item:
                self._rect_item = QtWidgets.QGraphicsRectItem()
                self._rect_item.setFlags(QtWidgets.QGraphicsRectItem.ItemIsSelectable)
                self._rect_item.setPen(self._pen)
                self._scene.addItem(self._rect_item)
            o_pos = event.pos()
            pos = self.mapToScene(event.pos())
            self.o_rect = QtCore.QRectF(self.o_start_pos, o_pos)
            self.rect = QtCore.QRectF(self._start_pos, pos)
            # rect = QtCore.QRectF(self._start_pos, pos).normalized()
            self._rect_item.setRect(self.rect)
            event.accept()

        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            print(self.rect.width())
            print(self.rect)
            print(str(self._start_pos.x()) + ", " + str(self._start_pos.y()))
            # self._scene.removeItem(self._rect_item)
            # # 重置矩形开始点和当前矩形
            # self._start_pos = None
            # self._rect_item = None
            event.accept()
        else:
            super().mouseReleaseEvent(event)

    # def mousePressEvent(self, event):
    #     self.flag = True
    #     self.x0 = event.x()
    #     self.y0 = event.y()
    #     print(str(self.x0) + ", " + str(self.y0))
    #
    # def mouseReleaseEvent(self, event):
    #     self.flag = False
    #
    # def mouseMoveEvent(self, event):
    #     if self.flag:
    #         self.x1 = event.x()
    #         self.y1 = event.y()
    #         self.update()
    #     else:
    #         super().mouseMoveEvent(event)

    # def paintEvent(self, event):
    #     super().paintEvent(event)
    #     rect = QtCore.QRect(self.x0, self.y0, abs(self.x1 - self.x0), abs(self.y1 - self.y0))
    #     painter = QtGui.QPainter(self)
    #     painter.setPen(QtGui.QPen(QtCore.Qt.red, 1, QtCore.Qt.SolidLine))
    #     painter.drawRect(rect)
    #
    #     pqscreen = QtGui.QGuiApplication.primaryScreen()
    #     pixmap2 = pqscreen.grabWindow(self.winId(), self.x0, self.y0, abs(self.x1 - self.x0), abs(self.y1 - self.y0))
    #     pixmap2.save('555.jpg')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1148, 688)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.gV = CustomGraphicsView(self.centralwidget)
        self.gV.setObjectName("gV")
        self.horizontalLayout.addWidget(self.gV)
        spacerItem1 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.tW = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tW.sizePolicy().hasHeightForWidth())
        self.tW.setSizePolicy(sizePolicy)
        self.tW.setObjectName("tW")
        self.tW.setColumnCount(0)
        self.tW.setRowCount(0)
        self.horizontalLayout.addWidget(self.tW)
        spacerItem2 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1148, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
